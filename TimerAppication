/*************PWM****************/
/*1.相关IO初始化*/
GPIO_InitTypeDef GPIO_Initure;
__HAL_RCC_TIM14_CLK_ENABLE();            //使能定时器14
__HAL_RCC_GPIOF_CLK_ENABLE();            //开启GPIOF时钟
GPIO_Initure.Pin = GPIO_PIN_9;           //PF9
GPIO_Initure.Mode = GPIO_MODE_AF_PP;     //复用推挽输出
GPIO_Initure.Pull = GPIO_PULLUP;         //上拉
GPIO_Initure.Speed = GPIO_SPEED_HIGH;    //高速
GPIO_Initure.Alternate = GPIO_AF9_TIM14; //PF9复用为TIM14_CH1
HAL_GPIO_Init(GPIOF, &GPIO_Initure);
/*2.定时器初始化*/
TIM_HandleTypeDef TIM14_Handler;                     //定时器14句柄
TIM14_Handler.Instance = TIM14;                      //定时器14
TIM14_Handler.Init.Prescaler = psc;                  //定时器分频
TIM14_Handler.Init.CounterMode = TIM_COUNTERMODE_UP; //向上计数模式
TIM14_Handler.Init.Period = arr;                     //自动重装载值
TIM14_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
HAL_TIM_PWM_Init(&TIM14_Handler);          //初始化为PWM
/*3.通道功能初始化*/
TIM_OC_InitTypeDef TIM14_CH1Handler;       //定时器14通道1句柄
TIM14_CH1Handler.OCMode = TIM_OCMODE_PWM1; //模式选择PWM1
TIM14_CH1Handler.Pulse = arr / 2;          //设置比较值,此值用来确定占空比，默认比较值为自动重装载值的一半,即占空比为50%
TIM14_CH1Handler.OCPolarity = TIM_OCPOLARITY_LOW;
HAL_TIM_PWM_ConfigChannel(&TIM14_Handler, &TIM14_CH1Handler, TIM_CHANNEL_1); //配置TIM14通道1
/*4.波形生成*/
HAL_TIM_PWM_Start(&TIM14_Handler, TIM_CHANNEL_1);                            //开启PWM通道1 生成波形

/****************************************************************/
/*PWM模式1  TIMx_CNT<TIMx_CCR1时通道1为有效电平，否则为无效电平*/
/*PWM模式2  TIMx_CNT<TIMx_CCR1时通道1为无效电平，否则为有效电平*/
/*输出比较极性为低 反向输出*/
/*输出比较极性为高 正向输出*/
/****************************************************************/

/*5.读取当前CCR1寄存器值*/
HAL_TIM_ReadCapturedValue(&TIM14_Handler, TIM_CHANNEL_1);
/*6.改变占空比*/
TIM14->CCR1 = compare;




/************输入捕获***********/
TIM_HandleTypeDef TIM5_Handler;    //定时器5句柄
TIM_IC_InitTypeDef TIM5_CH1Config; //定时器通道功能结构体
/*1.相关IO初始化*/
GPIO_InitTypeDef GPIO_Initure;
__HAL_RCC_TIM5_CLK_ENABLE();            //使能TIM5时钟
__HAL_RCC_GPIOA_CLK_ENABLE();           //开启GPIOA时钟
GPIO_Initure.Pin = GPIO_PIN_0;          //PA0
GPIO_Initure.Mode = GPIO_MODE_AF_PP;    //复用推挽输出
GPIO_Initure.Pull = GPIO_PULLDOWN;      //下拉
GPIO_Initure.Speed = GPIO_SPEED_HIGH;   //高速
GPIO_Initure.Alternate = GPIO_AF2_TIM5; //PA0复用为TIM5通道1
HAL_GPIO_Init(GPIOA, &GPIO_Initure);
/*2.中断优先级设置*/
HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0); //设置中断优先级，抢占优先级2，子优先级0
HAL_NVIC_EnableIRQ(TIM5_IRQn);         //开启ITM5中断通道
/*3.定时器初始化*/
TIM5_Handler.Instance = TIM5;                             //通用定时器5
TIM5_Handler.Init.Prescaler = psc;                        //分频系数
TIM5_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;       //向上计数器
TIM5_Handler.Init.Period = arr;                           //自动装载值
TIM5_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; //时钟分频银子
HAL_TIM_IC_Init(&TIM5_Handler);                           //初始化输入捕获时基参数 (input capture)
/*4.通道功能初始化*/
TIM5_CH1Config.ICPolarity = TIM_ICPOLARITY_RISING;        //上升沿捕获
TIM5_CH1Config.ICSelection = TIM_ICSELECTION_DIRECTTI;    //映射到TI1上
TIM5_CH1Config.ICPrescaler = TIM_ICPSC_DIV1;              //配置输入分频，不分频
TIM5_CH1Config.ICFilter = 0;                              //配置输入滤波器，不滤波
HAL_TIM_IC_ConfigChannel(&TIM5_Handler, &TIM5_CH1Config, TIM_CHANNEL_1); //配置TIM5通道1
/*5.开启通道捕获*/
HAL_TIM_IC_Start_IT(&TIM5_Handler, TIM_CHANNEL_1);        //开启TIM5的捕获通道1，并且开启捕获中断
__HAL_TIM_ENABLE_IT(&TIM5_Handler, TIM_IT_UPDATE);        //使能更新中断

/*6.中断服务函数*/
void TIM5_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&TIM5_Handler);//定时器共用处理函数
}
/*7.溢出中断(HAL_TIM_IRQHandler中调用)*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//更新中断（溢出）发生时执行
{
	
	if((TIM5CH1_CAPTURE_STA&0X80)==0)//还未成功捕获
	{
			if(TIM5CH1_CAPTURE_STA&0X40)//已经捕获到高电平了
			{
				if((TIM5CH1_CAPTURE_STA&0X3F)==0X3F)//高电平太长了
				{
					TIM5CH1_CAPTURE_STA|=0X80;		//标记成功捕获了一次
					TIM5CH1_CAPTURE_VAL=0XFFFFFFFF;
				}else TIM5CH1_CAPTURE_STA++;
			}	 
	}		
}

/*8.捕获中断处理(HAL_TIM_IRQHandler中调用)*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)//捕获中断发生时执行
{
	if((TIM5CH1_CAPTURE_STA&0X80)==0)//还未成功捕获
	{
		if(TIM5CH1_CAPTURE_STA&0X40)		//捕获到一个下降沿 		
			{	  			
				TIM5CH1_CAPTURE_STA|=0X80;		//成功捕获到一次高电平脉宽标记
                TIM5CH1_CAPTURE_VAL=HAL_TIM_ReadCapturedValue(&TIM5_Handler,TIM_CHANNEL_1);//获取当前的捕获值.
                TIM_RESET_CAPTUREPOLARITY(&TIM5_Handler,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
                TIM_SET_CAPTUREPOLARITY(&TIM5_Handler,TIM_CHANNEL_1,TIM_ICPOLARITY_RISING);//配置TIM5通道1上升沿捕获
			}else  								//还未开始,第一次捕获上升沿
			{
				TIM5CH1_CAPTURE_STA=0;			//清空
				TIM5CH1_CAPTURE_VAL=0;
				TIM5CH1_CAPTURE_STA|=0X40;		//下一次进入将会捕获到下降沿
				__HAL_TIM_DISABLE(&TIM5_Handler);        //关闭定时器5
				__HAL_TIM_SET_COUNTER(&TIM5_Handler,0);  //TIM5计数清零
				TIM_RESET_CAPTUREPOLARITY(&TIM5_Handler,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
				TIM_SET_CAPTUREPOLARITY(&TIM5_Handler,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);//定时器5通道1设置为下降沿捕获
				__HAL_TIM_ENABLE(&TIM5_Handler);//使能定时器5
			}		    
	}		
	
}
//捕获状态
//[7]:0,没有成功的捕获;1,成功捕获到一次.
//[6]:0,还没捕获到低电平;1,已经捕获到低电平了.
//[5:0]:捕获低电平后溢出的次数(对于32位定时器来说,1us计数器加1,溢出时间:4294秒)
u8  TIM5CH1_CAPTURE_STA=0;	//输入捕获状态		    				
u32 TIM5CH1_CAPTURE_VAL;	//输入捕获值(TIM2/TIM5是32位)



/*main.c*/
delay_ms(10);
/*制造一个占空比变化的PWM波形*/
TIM_SetTIM14Compare1(TIM_GetTIM14Capture1()+1); 
if(TIM_GetTIM14Capture1()==300)TIM_SetTIM14Compare1(0);        
if(TIM5CH1_CAPTURE_STA&0X80)        //成功捕获到了一次高电平脉宽
{
	temp=TIM5CH1_CAPTURE_STA&0X3F; 
	temp*=0XFFFFFFFF;		 	    //溢出时间总和
	temp+=TIM5CH1_CAPTURE_VAL;      //得到总的高电平时间
	printf("HIGH:%lld us\r\n",temp);//打印总的高点平时间
	TIM5CH1_CAPTURE_STA=0;          //开启下一次捕获
}
    









